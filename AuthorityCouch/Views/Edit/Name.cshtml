@model AuthorityCouch.Models.EditViewModel
@{
    ViewBag.Title = "Edit";
}

<h2><span class="text-muted">Edit > </span>@Model.Doc.authoritativeLabel</h2>
<small class="text-muted"><a href="@Url.Action("Name", "Assign", new { id = Model.Doc._id})"><span class="fa fa-link"></span> Assign Authority</a></small>
<hr />
@if (TempData["Message"] != null)
{
    <div class="alert alert-warning" role="alert">
        @Html.Raw(@TempData["Message"])
    </div>
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.Doc._id)

    <div class="row">
        <div class="col-md mb-2">
            <div class="form-group">
                <small class="text-muted">@Html.LabelFor(m => m.Doc.authoritativeLabel) <span class="text-danger">*</span></small>
                @Html.EditorFor(model => model.Doc.authoritativeLabel, new { htmlAttributes = new { @class = "form-control form-control-lg" } })
                @Html.ValidationMessageFor(model => model.Doc.authoritativeLabel, "", new { @class = "text-danger" })
            </div>
            <div class="form-group">
                <small class="text-muted"><label>Name Type</label> <span class="text-danger">*</span></small>
                @Html.DropDownListFor(model => model.Doc.type, Model.Types, null, new { @class = "form-control" })
            </div>
        </div>
    </div>

    <div class="alert alert-secondary" role="alert">
        <h5 class="mb-0">Single value</h5>
        <div class="mb-2"><small class="text-muted">Enter the external authority URI</small></div>
        <div class="form-group">
            @Html.EditorFor(model => Model.Doc.externalAuthorityUri, new { htmlAttributes = new { @class = "form-control" } })
        </div>
    </div>

    <div class="alert alert-secondary" role="alert">
        <h5 class="mb-0">Compound value</h5>
        <div class="mb-2"><small class="text-muted">Create a list of labels and external authority URIs</small></div>
        @if (Model.Doc.substrings != null)
        {
            for (var i = 0; i < Model.Doc.substrings.Count(); ++i)
            {
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-group">
                            <div class="input-group">
                                <div class="input-group-prepend">
                                    <span class="input-group-text" id="basic-addon1">@(Model.Doc.substrings.IndexOf(Model.Doc.substrings[i]) + 1)</span>
                                </div>
                                @Html.EditorFor(model => Model.Doc.substrings[i].authoritativeLabel, new { htmlAttributes = new { @class = "form-control", aria_describedby = "basic-addon1" } })
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-group">
                            @Html.EditorFor(model => Model.Doc.substrings[i].externalAuthorityUri, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                    </div>
                </div>
            }
        }

        @if (Model.Doc.substrings == null || Model.Doc.substrings.Count < 7)
        {
            <div class="row">
                <div class="col-md-6">
                    <div class="input-group">
                        <div class="input-group-prepend">
                            <span class="input-group-text" id="basic-addon1"><i class="fa fa-plus"></i></span>
                        </div>
                        @Html.EditorFor(model => Model.NewLabel, new { htmlAttributes = new { @class = "form-control", placeholder = "Term" } })
                    </div>

                </div>
                <div class="col-md-6">
                    <div class="form-group">
                        @Html.EditorFor(model => Model.NewUri, new { htmlAttributes = new { @class = "form-control", placeholder = "URI" } })
                    </div>
                </div>
            </div>
        }

        <div class="text-right">
            @if (Model.Doc.substrings != null && Model.Doc.substrings.Count > 0)
            {
                <a href="@Url.Action("NameByPosition", "Delete", new {id = Model.Doc._id, position = Model.Doc.substrings.Count})" class="btn btn-sm btn-danger" onclick="return confirm('Are you sure you want to delete the last element?')"><span class="fa fa-trash"></span> Delete Last Element</a>
            }
        </div>

    </div>

    <hr />
    <div class="form-group">
        <small class="text-muted">@Html.LabelFor(m => m.Doc.archivesSpaceUri)</small>
        @Html.EditorFor(model => model.Doc.archivesSpaceUri, new { htmlAttributes = new { @class = "form-control form-control-lg" } })
    </div>
    @*
        if (Model.Doc.topic != null)
         {
             <small class="text-muted">Topical Assignments</small>
             for (var i = 0; i < Model.Doc.topic.Count(); ++i)
             {
                 <div class="form-group">
                     <div class="input-group">
                         <div class="input-group-prepend">
                             <span class="input-group-text" id="basic-addon1">@(Model.Doc.topic.IndexOf(Model.Doc.topic[i]) + 1)</span>
                         </div>
                         @Html.EditorFor(model => Model.Doc.topic[i], new { htmlAttributes = new { @class = "form-control", aria_describedby = "basic-addon1" } })
                     </div>
                 </div>
             }
         }*@

    <button type="submit" class="btn btn-primary"><i class="fa fa-floppy-o"></i> Save</button>
    @*<a href="@ViewBag.AssignUrl" class="btn btn-warning"><i class="fa fa-times"></i> Cancel</a>*@
}

<hr />
<div class="form-group mb-0">
    @if (!Model.Doc.CanBeDeleted())
    {
        <button type="button" class="btn btn-danger" disabled><i class="fa fa-trash"></i> Delete Authority</button>
        <small class="text-muted d-block"><a href="@ViewBag.AssignUrl">Assignments</a> must be removed before authority can be deleted.</small>
    }
    else
    {
        <a href="@Url.Action("Name", "Delete", new {id = Model.Doc._id})" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this authority?')"><i class="fa fa-trash"></i> Delete Authority</a>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}